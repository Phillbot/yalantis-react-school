{"version":3,"sources":["api/index.ts","functions/fetches.ts","components/SkeletonLoader.tsx","components/pages/Home/index.tsx","actions/getRowAtction.ts","Router.tsx","reducers/getRowReducer.ts","reducers/index.ts","index.tsx","components/App/App.tsx"],"names":["Yalantis","getUsers","baseUrl","SkeletonLoaderChart","className","count","circle","height","width","SkeletonLoaderHome","Home","props","state","error","isLoaded","userList","setState","this","bind","fetch","then","res","json","result","key","months","forEach","user","dob","birthMonth","moment","format","Object","values","push","rowFromRedux","getRowToDispatch","monthAndCount","colors","slices","monthUserList","selectedMonth","keys","month","i","slice","length","offset","users","chartOptions","title","titleTextStyle","fontSize","fontName","is3D","pieSliceText","pieSliceTextStyle","bold","color","pieSliceBorderColor","legend","tooltip","text","chartArea","left","top","Helmet","chartType","loader","data","concat","options","chartEvents","eventName","callback","chartWrapper","google","chart","getChart","visualization","events","addListener","e","row","pea","sort","a","b","map","id","firstName","lastName","Component","connect","getRowReducer","dispatch","type","payload","getRowAtction","Router","exact","path","component","render","to","InitialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","basename","document","getElementById"],"mappings":"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","file":"static/js/main.e17f58af.chunk.js","sourcesContent":["export const Yalantis = {\r\n  baseUrl: \"https://yalantis-react-school.herokuapp.com/api/\",\r\n  get: {\r\n    getUsers: \"task0/users\"\r\n  }\r\n};\r\n","import { Yalantis } from \"../api\";\r\nimport { IYalantisGetUsers } from \"../Interfaces/index\";\r\nimport moment from \"moment\";\r\nimport months from \"../dictionaries/months.json\";\r\n\r\nconst {\r\n  baseUrl,\r\n  get: { getUsers }\r\n} = Yalantis;\r\n\r\nexport const yalantisGetUsersFetch = (setState: Function): void => {\r\n  fetch(`${baseUrl}${getUsers}`)\r\n    .then(res => res.json())\r\n    .then(\r\n      result => {\r\n        let userList = {} as any;\r\n\r\n        for (const key in months) {\r\n          userList[key] = [];\r\n        }\r\n\r\n        result.forEach((user: IYalantisGetUsers) => {\r\n          const { dob } = user;\r\n          const birthMonth: number = +moment(dob, \"YYYY-MM-DD HH:mm:ss\").format(\r\n            \"MM\"\r\n          );\r\n          const month: any = Object.values(userList)[birthMonth - 1];\r\n          month.push(user);\r\n        });\r\n\r\n        setState({\r\n          isLoaded: true,\r\n          userList\r\n        });\r\n      },\r\n      error => {\r\n        setState({\r\n          isLoaded: true,\r\n          error: true\r\n        });\r\n      }\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\n\r\nexport function SkeletonLoaderChart() {\r\n  return (\r\n    <>\r\n      <div className=\"desctop-chart-home-skeleton center\">\r\n        <Skeleton count={1} circle={true} height={450} width={450} />\r\n      </div>\r\n      <div className=\"mobile-chart-home-skeleton center\">\r\n        <Skeleton count={1} circle={true} height={250} width={250} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function SkeletonLoaderHome() {\r\n  return (\r\n    <>\r\n      <div className=\"row mt120 desctop-home-skeleton\">\r\n        <div className=\"col l7 m12 center\">\r\n          <Skeleton count={1} circle={true} height={450} width={450} />\r\n        </div>\r\n        <div className=\"col l4 m12 mt20\">\r\n          <Skeleton count={20} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row mt40 mobile-home-skeleton\">\r\n        <div className=\"col s12 center\">\r\n          <Skeleton count={1} circle={true} height={250} width={250} />\r\n        </div>\r\n        <div className=\"col s12 mt50\">\r\n          <Skeleton count={15} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}","import React, { Component } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { connect } from \"react-redux\";\r\nimport { yalantisGetUsersFetch } from \"../../../functions/fetches\";\r\nimport moment from \"moment\";\r\nimport { IHomeProps, IHomeState, IYalantisGetUsers } from \"../../../Interfaces\";\r\nimport getRowAtction from \"../../../actions/getRowAtction\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport \"./home.scss\";\r\nimport { SkeletonLoaderHome, SkeletonLoaderChart } from \"../../SkeletonLoader\";\r\n\r\nclass Home extends Component<IHomeProps, IHomeState> {\r\n  constructor(props: IHomeProps) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      userList: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState = this.setState.bind(this);\r\n    yalantisGetUsersFetch(this.setState);\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, userList } = this.state;\r\n\r\n    const { rowFromRedux, getRowToDispatch } = this.props;\r\n\r\n    if (error) {\r\n      return (\r\n        <div className=\"container center\">\r\n          <h4 className=\"mt50 mb50\">Произошла ошибка :-(</h4>\r\n          <p>Попробуйте обновить страницу</p>\r\n        </div>\r\n      );\r\n    } else if (!isLoaded) {\r\n      return (\r\n        <div className=\"container-fluid\">\r\n          <SkeletonLoaderHome />\r\n        </div>\r\n      );\r\n    } else {\r\n      let monthAndCount: any[] = [];\r\n      let colors: any[] = [];\r\n\r\n      const slices: any = {};\r\n\r\n      const monthUserList: any =\r\n        rowFromRedux !== null ? Object.values(userList)[rowFromRedux] : false;\r\n\r\n      const selectedMonth: any =\r\n        rowFromRedux !== null ? Object.keys(userList)[rowFromRedux] : false;\r\n\r\n      Object.keys(userList).forEach((month: any, i) => {\r\n        const count: any = Object.values(userList)[i];\r\n        monthAndCount = [...monthAndCount, [month.slice(0, 3), count.length]];\r\n        slices[i] = { offset: 0.04 };\r\n      });\r\n\r\n      Object.values(userList).forEach((users: any) => {\r\n        if (users.length < 2) {\r\n          colors = [...colors, \"#bdbdbd\"];\r\n        } else if (users.length > 2 && users.length <= 6) {\r\n          colors = [...colors, \"#3f51b5\"];\r\n        } else if (users.length > 6 && users.length <= 10) {\r\n          colors = [...colors, \"#4caf50\"];\r\n        } else if (users.length >= 11) {\r\n          colors = [...colors, \"#f44336\"];\r\n        }\r\n      });\r\n\r\n      const chartOptions = {\r\n        title: \"Yalantis Users\",\r\n        titleTextStyle: {\r\n          fontSize: 22\r\n        },\r\n        fontName: \"Ubuntu\",\r\n        is3D: true,\r\n        pieSliceText: \"label\",\r\n        pieSliceTextStyle: {\r\n          fontSize: 14,\r\n          bold: true,\r\n          color: \"#fff\"\r\n        },\r\n        pieSliceBorderColor: \"green\",\r\n        legend: \"none\",\r\n        tooltip: {\r\n          text: \"both\"\r\n        },\r\n        colors,\r\n        chartArea: {\r\n          left: \"5%\",\r\n          top: 50,\r\n          width: \"85%\",\r\n          height: \"85%\"\r\n        },\r\n        slices\r\n      };\r\n\r\n      return (\r\n        <div className=\"home container-fluid\">\r\n          <Helmet>\r\n            <title>Yalantis React School</title>\r\n          </Helmet>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col l7 s12\">\r\n              <Chart\r\n                className=\"chart\"\r\n                chartType=\"PieChart\"\r\n                loader={\r\n                  <div>\r\n                    <SkeletonLoaderChart />\r\n                  </div>\r\n                }\r\n                data={[[\"month\", \"users\"]].concat(monthAndCount)}\r\n                options={chartOptions}\r\n                chartEvents={[\r\n                  {\r\n                    eventName: \"ready\",\r\n                    callback: ({ chartWrapper, google }) => {\r\n                      const chart: any = chartWrapper.getChart();\r\n                      google.visualization.events.addListener(\r\n                        chart,\r\n                        \"onmouseover\",\r\n                        (e: any) => {\r\n                          const { row } = e;\r\n                          getRowToDispatch(row);\r\n\r\n                          chart.pea[0].slices[row].offset = 0.2;\r\n                        }\r\n                      );\r\n                      google.visualization.events.addListener(\r\n                        chart,\r\n                        \"onmouseout\",\r\n                        (e: any) => {\r\n                          getRowToDispatch(null);\r\n                        }\r\n                      );\r\n                    }\r\n                  }\r\n                ]}\r\n              />\r\n            </div>\r\n            <div className=\"col l4 s12 users-container\">\r\n              {rowFromRedux !== null ? (\r\n                <h4 className=\"center\">{selectedMonth}</h4>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              {rowFromRedux !== null ? (\r\n                <table className=\"centered\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>First Name</th>\r\n                      <th>Last Name</th>\r\n                      <th>Birthday</th>\r\n                    </tr>\r\n                  </thead>\r\n\r\n                  <tbody>\r\n                    {monthUserList\r\n                      .sort((a: any, b: any) =>\r\n                        a.dob > b.dob ? 1 : b.dob > a.dob ? -1 : 0\r\n                      )\r\n                      .map((users: IYalantisGetUsers) => {\r\n                        const { id, firstName, lastName, dob } = users;\r\n\r\n                        return (\r\n                          <tr key={id}>\r\n                            <td>{firstName}</td>\r\n                            <td>{lastName}</td>\r\n                            <td>\r\n                              {moment(dob, \"YYYY-MM-DD HH:mm:ss\").format(\r\n                                \"YYYY-MM-DD\"\r\n                              )}\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                  </tbody>\r\n                </table>\r\n              ) : (\r\n                <h4 className=\"center\"> Hover month to see data </h4>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToPRops = (state: any) => {\r\n  return {\r\n    rowFromRedux: state.getRowReducer.rowFromRedux\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => {\r\n  return {\r\n    getRowToDispatch: (rowFromRedux: number) => {\r\n      dispatch(getRowAtction(rowFromRedux));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToPRops, mapDispatchToProps)(Home);\r\n","export default function getRowAtction(rowFromRedux: number) {\r\n  return {\r\n    type: \"ROW\",\r\n    payload: rowFromRedux\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport Home from \"./components/pages/Home\";\r\n\r\nexport default function Router() {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route path=\"*\" render={() => <Redirect to=\"/\" />} />\r\n    </Switch>\r\n  );\r\n}\r\n","const InitialState = {\r\n  rowFromRedux: null\r\n};\r\n\r\nexport default function getRowReducer(state: {} = InitialState, action: any) {\r\n  switch (action.type) {\r\n    case \"ROW\":\r\n      return { ...state, rowFromRedux: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport getRowReducer from \"./getRowReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  getRowReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import React from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Router from \"../../Router\";\r\nimport \"materialize-css/dist/css/materialize.min.css\";\r\n\r\nimport \"./app.scss\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <BrowserRouter basename=\"yalantis-react-school\">\r\n      <div className=\"app\">\r\n        <Router />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n"],"sourceRoot":""}