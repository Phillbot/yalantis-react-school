{"version":3,"sources":["api/index.ts","functions/fetches.ts","components/SkeletonLoader.tsx","components/pages/Home/index.tsx","actions/getRowAtction.ts","Router.tsx","reducers/getRowReducer.ts","reducers/index.ts","index.tsx","components/App/App.tsx"],"names":["Yalantis","getUsers","baseUrl","SkeletonLoaderChart","className","count","circle","height","width","SkeletonLoaderHome","Home","props","state","error","isLoaded","userList","setState","this","bind","fetch","then","res","json","result","key","months","forEach","user","dob","birthMonth","moment","format","Object","values","push","rowFromRedux","getRowToDispatch","monthAndCount","colors","slices","monthUserList","selectedMonth","keys","month","i","slice","length","offset","users","chartOptions","title","titleTextStyle","fontSize","fontName","is3D","pieSliceText","pieSliceTextStyle","bold","color","pieSliceBorderColor","legend","tooltip","text","chartArea","left","top","Helmet","chartType","loader","data","concat","options","chartEvents","eventName","callback","chartWrapper","google","chart","getChart","visualization","events","addListener","e","row","pfa","sort","a","b","map","id","firstName","lastName","Component","connect","getRowReducer","dispatch","type","payload","getRowAtction","Router","exact","path","component","render","to","InitialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","basename","document","getElementById"],"mappings":"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","file":"static/js/main.717300fe.chunk.js","sourcesContent":["export const Yalantis = {\n  baseUrl: \"https://yalantis-react-school.herokuapp.com/api/\",\n  get: {\n    getUsers: \"task0/users\"\n  }\n};\n","import { Yalantis } from \"../api\";\nimport { IYalantisGetUsers } from \"../Interfaces/index\";\nimport moment from \"moment\";\nimport months from \"../dictionaries/months.json\";\n\nconst {\n  baseUrl,\n  get: { getUsers }\n} = Yalantis;\n\nexport const yalantisGetUsersFetch = (setState: Function): void => {\n  fetch(`${baseUrl}${getUsers}`)\n    .then(res => res.json())\n    .then(\n      result => {\n        let userList = {} as any;\n\n        for (const key in months) {\n          userList[key] = [];\n        }\n\n        result.forEach((user: IYalantisGetUsers) => {\n          const { dob } = user;\n          const birthMonth: number = +moment(dob, \"YYYY-MM-DD HH:mm:ss\").format(\n            \"MM\"\n          );\n          const month: any = Object.values(userList)[birthMonth - 1];\n          month.push(user);\n        });\n\n        setState({\n          isLoaded: true,\n          userList\n        });\n      },\n      error => {\n        setState({\n          isLoaded: true,\n          error: true\n        });\n      }\n    );\n};\n","import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\n\nexport function SkeletonLoaderChart() {\n  return (\n    <>\n      <div className=\"desctop-chart-home-skeleton center\">\n        <Skeleton count={1} circle={true} height={450} width={450} />\n      </div>\n      <div className=\"mobile-chart-home-skeleton center\">\n        <Skeleton count={1} circle={true} height={250} width={250} />\n      </div>\n    </>\n  );\n}\n\nexport function SkeletonLoaderHome() {\n  return (\n    <>\n      <div className=\"row mt120 desctop-home-skeleton\">\n        <div className=\"col l7 m12 center\">\n          <Skeleton count={1} circle={true} height={450} width={450} />\n        </div>\n        <div className=\"col l4 m12 mt20\">\n          <Skeleton count={20} />\n        </div>\n      </div>\n\n      <div className=\"row mt40 mobile-home-skeleton\">\n        <div className=\"col s12 center\">\n          <Skeleton count={1} circle={true} height={250} width={250} />\n        </div>\n        <div className=\"col s12 mt50\">\n          <Skeleton count={15} />\n        </div>\n      </div>\n    </>\n  );\n}","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport { yalantisGetUsersFetch } from \"../../../functions/fetches\";\nimport moment from \"moment\";\nimport { IHomeProps, IHomeState, IYalantisGetUsers } from \"../../../Interfaces\";\nimport getRowAtction from \"../../../actions/getRowAtction\";\nimport { Chart } from \"react-google-charts\";\nimport \"./home.scss\";\nimport { SkeletonLoaderHome, SkeletonLoaderChart } from \"../../SkeletonLoader\";\n\nclass Home extends Component<IHomeProps, IHomeState> {\n  constructor(props: IHomeProps) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      userList: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState = this.setState.bind(this);\n    yalantisGetUsersFetch(this.setState);\n  }\n\n  render() {\n    const { error, isLoaded, userList } = this.state;\n\n    const { rowFromRedux, getRowToDispatch } = this.props;\n\n    if (error) {\n      return (\n        <div className=\"container center\">\n          <h4 className=\"mt50 mb50\">Произошла ошибка :-(</h4>\n          <p>Попробуйте обновить страницу</p>\n        </div>\n      );\n    } else if (!isLoaded) {\n      return (\n        <div className=\"container-fluid\">\n          <SkeletonLoaderHome />\n        </div>\n      );\n    } else {\n      let monthAndCount: any[] = [];\n      let colors: any[] = [];\n\n      const slices: any = {};\n\n      const monthUserList: any =\n        rowFromRedux !== null ? Object.values(userList)[rowFromRedux] : false;\n\n      const selectedMonth: any =\n        rowFromRedux !== null ? Object.keys(userList)[rowFromRedux] : false;\n\n      Object.keys(userList).forEach((month: any, i) => {\n        const count: any = Object.values(userList)[i];\n        monthAndCount = [...monthAndCount, [month.slice(0, 3), count.length]];\n        slices[i] = { offset: 0.04 };\n      });\n\n      Object.values(userList).forEach((users: any) => {\n        if (users.length < 2) {\n          colors = [...colors, \"#bdbdbd\"];\n        } else if (users.length > 2 && users.length <= 6) {\n          colors = [...colors, \"#3f51b5\"];\n        } else if (users.length > 6 && users.length <= 10) {\n          colors = [...colors, \"#4caf50\"];\n        } else if (users.length >= 11) {\n          colors = [...colors, \"#f44336\"];\n        }\n      });\n\n      const chartOptions = {\n        title: \"Yalantis Users\",\n        titleTextStyle: {\n          fontSize: 22\n        },\n        fontName: \"Ubuntu\",\n        is3D: true,\n        pieSliceText: \"label\",\n        pieSliceTextStyle: {\n          fontSize: 14,\n          bold: true,\n          color: \"#fff\"\n        },\n        pieSliceBorderColor: \"green\",\n        legend: \"none\",\n        tooltip: {\n          text: \"both\"\n        },\n        colors,\n        chartArea: {\n          left: \"5%\",\n          top: 50,\n          width: \"85%\",\n          height: \"85%\"\n        },\n        slices\n      };\n\n      return (\n        <div className=\"home container-fluid\">\n          <Helmet>\n            <title>Yalantis React School</title>\n          </Helmet>\n\n          <div className=\"row\">\n            <div className=\"col l7 s12\">\n              <Chart\n                className=\"chart\"\n                chartType=\"PieChart\"\n                loader={\n                  <div>\n                    <SkeletonLoaderChart />\n                  </div>\n                }\n                data={[[\"month\", \"users\"]].concat(monthAndCount)}\n                options={chartOptions}\n                chartEvents={[\n                  {\n                    eventName: \"ready\",\n                    callback: ({ chartWrapper, google }) => {\n                      const chart: any = chartWrapper.getChart();\n                      google.visualization.events.addListener(\n                        chart,\n                        \"onmouseover\",\n                        (e: any) => {\n                          const { row } = e;\n                          getRowToDispatch(row);\n                          chart.pfa[0].slices[row].offset = 0.2;\n                        }\n                      );\n                      google.visualization.events.addListener(\n                        chart,\n                        \"onmouseout\",\n                        (e: any) => {\n                          getRowToDispatch(null);\n                        }\n                      );\n                    }\n                  }\n                ]}\n              />\n            </div>\n            <div className=\"col l4 s12 users-container\">\n              {rowFromRedux !== null ? (\n                <h4 className=\"center\">{selectedMonth}</h4>\n              ) : (\n                \"\"\n              )}\n\n              {rowFromRedux !== null ? (\n                <table className=\"centered\">\n                  <thead>\n                    <tr>\n                      <th>First Name</th>\n                      <th>Last Name</th>\n                      <th>Birthday</th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {monthUserList\n                      .sort((a: any, b: any) =>\n                        a.dob > b.dob ? 1 : b.dob > a.dob ? -1 : 0\n                      )\n                      .map((users: IYalantisGetUsers) => {\n                        const { id, firstName, lastName, dob } = users;\n\n                        return (\n                          <tr key={id}>\n                            <td>{firstName}</td>\n                            <td>{lastName}</td>\n                            <td>\n                              {moment(dob, \"YYYY-MM-DD HH:mm:ss\").format(\n                                \"YYYY-MM-DD\"\n                              )}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                  </tbody>\n                </table>\n              ) : (\n                <h4 className=\"center\"> Hover month to see data </h4>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToPRops = (state: any) => {\n  return {\n    rowFromRedux: state.getRowReducer.rowFromRedux\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Function) => {\n  return {\n    getRowToDispatch: (rowFromRedux: number) => {\n      dispatch(getRowAtction(rowFromRedux));\n    }\n  };\n};\n\nexport default connect(mapStateToPRops, mapDispatchToProps)(Home);\n","export default function getRowAtction(rowFromRedux: number) {\n  return {\n    type: \"ROW\",\n    payload: rowFromRedux\n  };\n}\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Home from \"./components/pages/Home\";\n\nexport default function Router() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"*\" render={() => <Redirect to=\"/\" />} />\n    </Switch>\n  );\n}\n","const InitialState = {\n  rowFromRedux: null\n};\n\nexport default function getRowReducer(state: {} = InitialState, action: any) {\n  switch (action.type) {\n    case \"ROW\":\n      return { ...state, rowFromRedux: action.payload };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport getRowReducer from \"./getRowReducer\";\n\nconst rootReducer = combineReducers({\n  getRowReducer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Router from \"../../Router\";\nimport \"materialize-css/dist/css/materialize.min.css\";\n\nimport \"./app.scss\";\n\nexport default function App() {\n  return (\n    <BrowserRouter basename=\"yalantis-react-school\">\n      <div className=\"app\">\n        <Router />\n      </div>\n    </BrowserRouter>\n  );\n}\n"],"sourceRoot":""}